# some general configuration
HA_CLUSTER_IP="172.16.224.1"


# EXECUTING CODE INSIDE THIS CONFIG FILE
# ======================================
#
# it is possible to add normal shellscript to this file as the
# script uses a simple "source $VZHAIPD_CONFIG" to load it.
# this has pros and cons. on the pro side we can execute code and
# make our config much more flexible. e.g. you could add code that
# checks what hardware node the script is run on and depending
# on the node change your config accordingly, without touching the
# normal mount/umount scripts from the release
# on the cons side this bears some security risks as all code is run
# inside the hardware node with the rights of the root user. so be
# carefull what you define here. some example code might be:
#
# echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle
# echo "1024 65535" > /proc/sys/net/ipv4/ip_local_port_range
# echo "1" > /proc/sys/net/ipv4/tcp_timestamps
# echo "15" > /proc/sys/net/ipv4/tcp_fin_timeout
# echo "3" > /proc/sys/net/ipv4/tcp_orphan_retries
# echo "1" > /proc/sys/net/ipv4/tcp_rfc1337
#
# this would set some system wide tcp parameters
# note that the code is executed whenever the config is loaded. a config
# load happens on startup, when a SIGHUP is received and when the script
# is called with the stop arg (on container shutdown).


# HAVING A PREFERRED MASTER
# =========================
#
# in our default scenario all nodes in a cluster are equal
# meaning that if one node fails, the other takes over and stays
# master for as long as it's up. if you'd like to change this behavior
# to have a preferred master, one thing you could do is add something
# like this in your config file:
#
# WE_ARE_THE_PREFERRED_MASTER=true
# if [ $WE_ARE_THE_PREFERRED_MASTER = "true" ]
# then
#     $CMD_VZCTL set $CONTAINER_ID --ipadd $HA_CLUSTER_IP
# fi
#
# note that this will result in HA_CLUSTER_IP being used twice on your
# network bus. depending on your overall network architecture this might be
# a bad thing and lead to unwanted effects. also make sure not to use the
# HA_CLUSTER_IP for your main application but only for the heartbeat purpose.
# define any application ips in HA_IP_FILE
# what will happen normally is that this command will add HA_CLUSTER_IP to the
# preferred master (make sure to set WE_ARE_THE_PREFERRED_MASTER=true only on one
# of your cluster nodes!) on config load. this will generate an ip conflict on the
# network bus. after MASTER_FRESHNESS_CHECK_INTERVAL any current master will notice the
# conflict and become slave. the preferred master will notice that HA_CLUSTER_IP is now
# unavailable on the bus and become master itself (it'll think HA_CLUSTER_IP is unavailable
# because won't detect it's local presence)
# this procedure can also be used on the shell to manually enforce master/slave failover


# HAVING NO START AND STOP CMD OR ADDITIONAL IPS
# ==============================================
#
# if you don't need to start or stop anything upon becoming master/slave
# and/or don't want to load additional ips just define
#
# START_CMD=""
# STOP_CMD=""
# HA_IP_FILE=""
#
# the script will notice that the vars are empty and skip all related code
